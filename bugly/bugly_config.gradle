//Bugly 版本相关信息
ext {
    buglyVersion = "1.3.5"
    buglyNativeVersion = "3.3.1"
    tinkerLibVersion = "1.9.8"
    tinkerSupportVersion = "1.1.3"

    //application工程名, 如果是在Library里面引用, 需要手动配置
    app_module_name = ""

    //基准包备份目录, 相对于 root project
    bugly_back_path = "buglyApk"

    //打补丁的基准包目录名, 相对于 bugly_back_path
    bugly_patch_apk_dir = "app-0918-10-36-59"
    //此次补丁id, 需要和生成基准包时的id唯一
    bugly_patch_id = "bugly-1.13.7-patch"
    //加固专用(如果基准包需要加固, 请设置为true, 否则补丁不会生效)
    bugly_protected = false

    //以下变量,会自动获取,你也可以强制指定.
    bugly_patch_apk_name = "" //App_20180918_V2.0.2_release.apk
    //混淆对应的mapping文件名, 默认在: app/build/outputs/mapping/release/mapping.txt
    bugly_mapping_file_name = "" //app-release-mapping.txt
    //资源id保存的文件名, 默认在: app/build/intermediates/symbols/release/R.txt
    bugly_res_file_name = "" //app-release-R.txt
}

/**
 * *                                                   #
 * #                                                   #
 * #                       _oo0oo_                     #
 * #                      o8888888o                    #
 * #                      88" . "88                    #
 * #                      (| -_- |)                    #
 * #                      0\  =  /0                    #
 * #                    ___/`---'\___                  #
 * #                  .' \\|     |# '.                 #
 * #                 / \\|||  :  |||# \                #
 * #                / _||||| -:- |||||- \              #
 * #               |   | \\\  -  #/ |   |              #
 * #               | \_|  ''\---/''  |_/ |             #
 * #               \  .-\__  '-'  ___/-. /             #
 * #             ___'. .'  /--.--\  `. .'___           #
 * #          ."" '<  `.___\_<|>_/___.' >' "".         #
 * #         | | :  `- \`.;`\ _ /`;.`/ - ` : | |       #
 * #         \  \ `_.   \_ __\ /__ _/   .-` /  /       #
 * #     =====`-.____`.___ \_____/___.-`___.-'=====    #
 * #                       `=---='                     #
 * #     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   #
 * #                                                   #
 * #               佛祖保佑         补丁生效             #
 * #                                                   #
 * 已下内容酌情修改
 * */
def isRootProject = project == project.getRootProject()
def isLibrary = project.getPlugins().hasPlugin("com.android.library")
def isApp = project.getPlugins().hasPlugin("com.android.application")

def app_module_name = ext.app_module_name
if (ext.app_module_name == "" && !isRootProject) {
    app_module_name = project.getName()
}

def patch_path = rootDir.getAbsolutePath() + "/" + app_module_name + "/build/outputs/patch"
def patch_file_name = "patch_signed_7zip.apk"

def bugly_apk_path = rootDir.getAbsolutePath() + "/" + ext.bugly_back_path
def bugly_patch_id = ext.bugly_patch_id
def bugly_patch_apk_dir = ext.bugly_patch_apk_dir

deleteApkFolder(bugly_apk_path, true)

//println "1:" + ext.bugly_patch_apk_dir

//println '工程:' + project.getDisplayName()
//println '输出目录:' + buildDir

def buildType = ""

//root project 和 app project 脚本自动区分执行
if (isRootProject) {
    project.getRootProject().buildscript {
        dependencies {
            classpath "com.tencent.bugly:tinker-support:$tinkerSupportVersion"
        }
    }
} else if (isApp || isLibrary) {
    if (isApp) {
        initConfig(bugly_apk_path)
        apply from: '../bugly/tinker-support.gradle'
    }
    android {
        defaultConfig {
            ndk {
                //设置支持的SO库架构
                abiFilters 'armeabi-v7a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            }
        }
    }
    dependencies {
        implementation "com.android.support:multidex:1.0.1" // 多dex配置
        //注释掉原有bugly的仓库
        //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4
        implementation "com.tencent.bugly:crashreport_upgrade:$buglyVersion"
        // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
        implementation "com.tencent.tinker:tinker-android-lib:$tinkerLibVersion"
        implementation "com.tencent.bugly:nativecrashreport:$buglyNativeVersion"
        //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    }
    if (isApp) {
//        tasks.each {
//            println "each task:" + it.name
//            println '....end'
//        }
//    tasks.getByName("assembleRelease") {
//        it.doLast {
//        }
//    }
        tasks.whenTaskAdded {
//            println "add task:" + it.name

            if (it.name.startsWith("assemble")) {
                def type = it.name.substring("assemble".length())
                it.doFirst {
                    if (type != null && type.length() > 0) {
                        buildType = type

                        //清理之前的补丁包, 和多余的APK备份
                        def clearPath = patch_path + "/" + type
                        println "清理旧补丁->" + clearPath
                        clearPatch(clearPath)
                        //clearPatch(patch_path + "/release")
                    }
                }
            } else if (it.name.startsWith("buildTinkerPatch")) {
                def type = it.name.substring("buildTinkerPatch".length())
                it.doFirst {
                    println "开始编译补丁->" + it.name + ' type:' + type + ' buildType:' + buildType
                    //println "2:" + bugly_patch_apk_dir
                    //1 / 0
                }
                it.doLast {
                    /**收集补丁文件*/
                    def debugPath = patch_path + "/" + type + "/" + patch_file_name
                    copyFile(debugPath, bugly_apk_path + "/" + bugly_patch_apk_dir, bugly_patch_id)
                    copyFile(debugPath, bugly_apk_path, bugly_patch_id)

                    createFile(bugly_apk_path + "/" + bugly_patch_apk_dir, bugly_patch_id + ".bugly")
                }
            }
        }
    }
}

/**
 * 删除之前补丁包
 * */
def clearPatch(String patchPath) {
    File patchDir = new File(patchPath)
    if (patchDir != null && patchDir.isDirectory()) {
        def files = patchDir.listFiles()
        if (files != null) {
            for (File f : files) {
                f.delete()
                println "清理:" + f.getAbsolutePath()
            }
        }
    }
}

/**
 * 复制文件
 * */
def copyFile(String from, String toPath, String suffix) {
    InputStream input = null
    OutputStream output = null
    try {
        File source = new File(from)
        if (!source.exists()) {
            return
        }
        String rawName = source.getName().substring(0, source.getName().indexOf('.'))
        File dest = new File(toPath + "/" + rawName + "_" + suffix + ".apk")
        println '复制文件:' + source.getAbsolutePath() + " -> " + dest.getAbsolutePath()

        input = new FileInputStream(source)
        output = new FileOutputStream(dest)
        byte[] buf = new byte[1024]
        int bytesRead
        while ((bytesRead = input.read(buf)) != -1) {
            output.write(buf, 0, bytesRead)
        }
    } finally {
        if (input != null) {
            input.close()
        }
        if (output != null) {
            output.close()
        }
    }
}

def createFileInLastFolder(String path, String fileName) {
    File patchDir = new File(path)
    if (patchDir != null && patchDir.isDirectory()) {
        def files = patchDir.listFiles()
        if (files != null) {
            println files[0].name
            println files.sort()[0]
            println files[0].name
        }
    }
}

/**新建文件*/
static def createFile(String folder, String fileName) {
    File folderFile = new File(folder)
    if (!folderFile.exists()) {
        folderFile.mkdirs()
    }
    File file = new File(folder, fileName)
    if (!file.exists()) {
        file.createNewFile()
    }
}

/**清理文件夹*/
def deleteApkFolder(String path, boolean isRootPath) {
    File folder = new File(path)
    if (folder != null && folder.isDirectory()) {
        def files = folder.listFiles()
        if (files != null) {
            for (File f : files) {
                if (f.isFile()) {
                    if (!isRootPath) {
                        f.delete()
                        println "清理文件:" + f.getAbsolutePath()
                    }
                } else if (f.isDirectory()) {
                    if (ignoreFolder(f.getAbsolutePath())) {
                        continue
                    }
                    deleteApkFolder(f.getAbsolutePath(), false)
                    f.delete()
                    println "清理文件夹:" + f.getAbsolutePath()
                }
            }
        }
    }
}

/**文件夹是否需要忽略清理*/
def ignoreFolder(String path) {
    File folder = new File(path)
    if (folder != null && folder.isDirectory()) {
        if (folder.getName() == bugly_patch_apk_dir) {
            return true
        }
        def files = folder.listFiles()
        if (files != null) {
            def contain = false
            for (File f : files) {
                contain = f.getName().contains(".bugly")
                if (contain) {
                    break
                }
            }
            return contain
        }
    }
    return false
}

/**读取初始化配置*/
def initConfig(String buglyApkPath) {
    //println buglyApkPath
    //println bugly_patch_apk_dir
    def patchPath = buglyApkPath + "/" + bugly_patch_apk_dir
    //println '111'
    //println patchPath
    def folder = new File(patchPath)
    if (folder.isDirectory()) {
        def files = folder.listFiles()
        if (files != null) {
            for (File f : files) {
                if (f.isFile()) {
                    def name = f.getName()
                    println name
                    if (name.endsWith('R.txt')) {
                        //R资源变量赋值
                        if (ext.bugly_res_file_name == "") {
                            ext.bugly_res_file_name = name
                        }
                    } else if (name.endsWith('mapping.txt')) {
                        //mapping变量赋值
                        if (ext.bugly_mapping_file_name == "") {
                            ext.bugly_mapping_file_name = name
                        }
                    } else if (name.endsWith(".apk") && !name.contains('patch')) {
                        //基准包变量赋值
                        if (ext.bugly_patch_apk_name == "") {
                            ext.bugly_patch_apk_name = name
                        }
                    }
                }
            }
        }
    }
}

/*
*  混淆
-dontwarn com.tencent.bugly.**
-keep public class com.tencent.bugly.**{*;}
-keep class android.support.**{*;}
-dontwarn com.tencent.tinker.**
-keep class com.tencent.tinker.** { *; }
* */

/*
* 参考
* https://blog.csdn.net/ytfunnysite/article/details/78814001
* */